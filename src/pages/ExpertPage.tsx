
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { useAuth } from '@/contexts/AuthContext';
import { NavHeader } from '@/components/NavHeader';
import { useToast } from '@/hooks/use-toast';
import { 
  Users, 
  Star, 
  Phone, 
  Video, 
  MessageCircle, 
  Calendar,
  Clock,
  Award,
  BookOpen
} from 'lucide-react';

const ExpertPage = () => {
  const { isAuthenticated } = useAuth();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [selectedExpert, setSelectedExpert] = useState<number | null>(null);
  const [consultationType, setConsultationType] = useState('video');
  const [query, setQuery] = useState('');

  useEffect(() => {
    if (!isAuthenticated) {
      navigate('/auth');
    }
  }, [isAuthenticated, navigate]);

  const experts = [
    {
      id: 1,
      name: '‡§°‡•â. ‡§∞‡§æ‡§Æ ‡§™‡•ç‡§∞‡§∏‡§æ‡§¶ ‡§∂‡§∞‡•ç‡§Æ‡§æ',
      specialty: '‡§´‡§∏‡§≤ ‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û',
      experience: 15,
      rating: 4.8,
      consultations: 1200,
      languages: ['‡§π‡§ø‡§Ç‡§¶‡•Ä', '‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä', '‡§™‡§Ç‡§ú‡§æ‡§¨‡•Ä'],
      nextAvailable: '‡§Ü‡§ú 2:00 PM',
      feeVideo: 300,
      feePhone: 200,
      feeMessage: 100,
      specializations: ['‡§ó‡•á‡§π‡•Ç‡§Ç', '‡§ö‡§æ‡§µ‡§≤', '‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£', '‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡•á‡§§‡•Ä'],
      image: 'üë®‚Äçüåæ'
    },
    {
      id: 2,
      name: '‡§™‡•ç‡§∞‡•ã. ‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§™‡§ü‡•á‡§≤',
      specialty: '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§è‡§µ‡§Ç ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û',
      experience: 20,
      rating: 4.9,
      consultations: 950,
      languages: ['‡§π‡§ø‡§Ç‡§¶‡•Ä', '‡§ó‡•Å‡§ú‡§∞‡§æ‡§§‡•Ä', '‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä'],
      nextAvailable: '‡§ï‡§≤ 10:00 AM',
      feeVideo: 400,
      feePhone: 250,
      feeMessage: 150,
      specializations: ['‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£', '‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§∏‡§≤‡§æ‡§π', '‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§æ‡§¶', '‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§µ'],
      image: 'üë©‚Äçüî¨'
    },
    {
      id: 3,
      name: '‡§°‡•â. ‡§Ö‡§Æ‡§ø‡§§ ‡§ï‡•Å‡§Æ‡§æ‡§∞',
      specialty: '‡§¨‡§æ‡§ó‡§µ‡§æ‡§®‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û',
      experience: 12,
      rating: 4.7,
      consultations: 800,
      languages: ['‡§π‡§ø‡§Ç‡§¶‡•Ä', '‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä'],
      nextAvailable: '‡§Ü‡§ú 4:30 PM',
      feeVideo: 350,
      feePhone: 200,
      feeMessage: 120,
      specializations: ['‡§´‡§≤ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®', '‡§∏‡§¨‡•ç‡§ú‡•Ä ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®', '‡§´‡•Ç‡§≤‡•ã‡§Ç ‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä', '‡§ó‡•ç‡§∞‡•Ä‡§®‡§π‡§æ‡§â‡§∏'],
      image: 'üë®‚Äçüç≥'
    },
    {
      id: 4,
      name: '‡§°‡•â. ‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ó‡•Å‡§™‡•ç‡§§‡§æ',
      specialty: '‡§™‡§∂‡•Å‡§™‡§æ‡§≤‡§® ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û',
      experience: 18,
      rating: 4.8,
      consultations: 1100,
      languages: ['‡§π‡§ø‡§Ç‡§¶‡•Ä', '‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä', '‡§¨‡§Ç‡§ó‡§æ‡§≤‡•Ä'],
      nextAvailable: '‡§ï‡§≤ 11:30 AM',
      feeVideo: 300,
      feePhone: 200,
      feeMessage: 100,
      specializations: ['‡§ó‡§æ‡§Ø-‡§≠‡•à‡§Ç‡§∏', '‡§™‡•ã‡§≤‡•ç‡§ü‡•ç‡§∞‡•Ä', '‡§¨‡§ï‡§∞‡•Ä ‡§™‡§æ‡§≤‡§®', '‡§ö‡§æ‡§∞‡§æ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®'],
      image: 'üë©‚Äç‚öïÔ∏è'
    }
  ];

  const recentConsultations = [
    {
      expert: '‡§°‡•â. ‡§∞‡§æ‡§Æ ‡§™‡•ç‡§∞‡§∏‡§æ‡§¶ ‡§∂‡§∞‡•ç‡§Æ‡§æ',
      topic: '‡§ó‡•á‡§π‡•Ç‡§Ç ‡§Æ‡•á‡§Ç ‡§™‡•Ä‡§≤‡•á ‡§ß‡§¨‡•ç‡§¨‡•á ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ',
      date: '2 ‡§¶‡§ø‡§® ‡§™‡§π‡§≤‡•á',
      rating: 5,
      status: '‡§™‡•Ç‡§∞‡•ç‡§£'
    },
    {
      expert: '‡§™‡•ç‡§∞‡•ã. ‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§™‡§ü‡•á‡§≤',
      topic: '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä',
      date: '1 ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§™‡§π‡§≤‡•á',
      rating: 4,
      status: '‡§™‡•Ç‡§∞‡•ç‡§£'
    }
  ];

  const handleBookConsultation = () => {
    if (!selectedExpert) {
      toast({
        title: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ö‡•Å‡§®‡•á‡§Ç',
        description: '‡§™‡§π‡§≤‡•á ‡§ï‡§ø‡§∏‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ï‡•ã ‡§ö‡•Å‡§®‡•á‡§Ç',
        variant: 'destructive'
      });
      return;
    }

    if (!query.trim()) {
      toast({
        title: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç',
        description: '‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ø‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§≤‡§ø‡§ñ‡•á‡§Ç',
        variant: 'destructive'
      });
      return;
    }

    const expert = experts.find(e => e.id === selectedExpert);
    toast({
      title: '‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§∏‡§´‡§≤',
      description: `${expert?.name} ‡§ï‡•á ‡§∏‡§æ‡§• ${consultationType === 'video' ? '‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã' : consultationType === 'phone' ? '‡§´‡•ã‡§®' : '‡§Æ‡•à‡§∏‡•á‡§ú'} ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§¨‡•Å‡§ï ‡§π‡•ã ‡§ó‡§Ø‡§æ`,
    });

    setSelectedExpert(null);
    setQuery('');
  };

  if (!isAuthenticated) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <NavHeader />
      
      <div className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡§≤‡§æ‡§π</h1>
          <p className="text-gray-600">‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡•ã‡§Ç ‡§∏‡•á ‡§∏‡•Ä‡§ß‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç</p>
        </div>

        {/* Stats */}
        <div className="grid md:grid-cols-4 gap-6 mb-8">
          <Card className="border-green-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-green-600">‡§ï‡•Å‡§≤ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û</CardTitle>
              <Users className="h-4 w-4 text-green-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-700">{experts.length}</div>
              <p className="text-xs text-green-600">‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û</p>
            </CardContent>
          </Card>
          
          <Card className="border-blue-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-blue-600">‡§î‡§∏‡§§ ‡§∞‡•á‡§ü‡§ø‡§Ç‡§ó</CardTitle>
              <Star className="h-4 w-4 text-blue-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-blue-700">4.8</div>
              <p className="text-xs text-blue-600">5 ‡§Æ‡•á‡§Ç ‡§∏‡•á</p>
            </CardContent>
          </Card>

          <Card className="border-orange-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-orange-600">‡§ï‡•Å‡§≤ ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂</CardTitle>
              <MessageCircle className="h-4 w-4 text-orange-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-orange-700">4,050+</div>
              <p className="text-xs text-orange-600">‡§∏‡§´‡§≤ ‡§∏‡§≤‡§æ‡§π</p>
            </CardContent>
          </Card>

          <Card className="border-purple-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-purple-600">‡§§‡•Å‡§∞‡§Ç‡§§ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß</CardTitle>
              <Clock className="h-4 w-4 text-purple-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-purple-700">2</div>
              <p className="text-xs text-purple-600">‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û</p>
            </CardContent>
          </Card>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Experts List */}
          <div className="lg:col-span-2">
            <Card className="mb-6">
              <CardHeader>
                <CardTitle>‡§π‡§Æ‡§æ‡§∞‡•á ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û</CardTitle>
                <CardDescription>‡§Ö‡§®‡•Å‡§≠‡§µ‡•Ä ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡•ã‡§Ç ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç</CardDescription>
              </CardHeader>
            </Card>

            <div className="space-y-6">
              {experts.map((expert) => (
                <Card 
                  key={expert.id} 
                  className={`cursor-pointer transition-all hover:shadow-lg ${
                    selectedExpert === expert.id ? 'ring-2 ring-green-500 bg-green-50' : ''
                  }`}
                  onClick={() => setSelectedExpert(expert.id)}
                >
                  <CardContent className="p-6">
                    <div className="flex items-start space-x-4">
                      <div className="text-4xl">{expert.image}</div>
                      <div className="flex-1">
                        <div className="flex justify-between items-start mb-2">
                          <div>
                            <h3 className="font-semibold text-lg text-gray-800">{expert.name}</h3>
                            <p className="text-gray-600">{expert.specialty}</p>
                          </div>
                          <div className="text-right">
                            <div className="flex items-center space-x-1">
                              <Star className="h-4 w-4 text-yellow-500 fill-current" />
                              <span className="font-medium">{expert.rating}</span>
                            </div>
                            <p className="text-sm text-gray-500">{expert.consultations} ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂</p>
                          </div>
                        </div>

                        <div className="flex items-center space-x-4 text-sm text-gray-600 mb-3">
                          <div className="flex items-center space-x-1">
                            <Award className="h-4 w-4" />
                            <span>{expert.experience} ‡§∏‡§æ‡§≤ ‡§Ö‡§®‡•Å‡§≠‡§µ</span>
                          </div>
                          <div className="flex items-center space-x-1">
                            <Clock className="h-4 w-4" />
                            <span>{expert.nextAvailable}</span>
                          </div>
                        </div>

                        <div className="flex flex-wrap gap-2 mb-3">
                          {expert.specializations.map((spec, idx) => (
                            <Badge key={idx} variant="secondary" className="text-xs">
                              {spec}
                            </Badge>
                          ))}
                        </div>

                        <div className="flex flex-wrap gap-2 mb-3">
                          {expert.languages.map((lang, idx) => (
                            <Badge key={idx} variant="outline" className="text-xs">
                              {lang}
                            </Badge>
                          ))}
                        </div>

                        <div className="flex items-center space-x-4 text-sm">
                          <div className="flex items-center space-x-1">
                            <Video className="h-4 w-4 text-blue-600" />
                            <span>‚Çπ{expert.feeVideo}</span>
                          </div>
                          <div className="flex items-center space-x-1">
                            <Phone className="h-4 w-4 text-green-600" />
                            <span>‚Çπ{expert.feePhone}</span>
                          </div>
                          <div className="flex items-center space-x-1">
                            <MessageCircle className="h-4 w-4 text-purple-600" />
                            <span>‚Çπ{expert.feeMessage}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          {/* Booking Panel */}
          <div>
            <Card className="sticky top-24">
              <CardHeader>
                <CardTitle>‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§¨‡•Å‡§ï ‡§ï‡§∞‡•á‡§Ç</CardTitle>
                <CardDescription>
                  {selectedExpert 
                    ? `${experts.find(e => e.id === selectedExpert)?.name} ‡§ï‡•á ‡§∏‡§æ‡§•`
                    : '‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ö‡•Å‡§®‡•á‡§Ç'
                  }
                </CardDescription>
              </CardHeader>
              
              <CardContent className="space-y-4">
                {selectedExpert && (
                  <>
                    <div>
                      <label className="text-sm font-medium mb-2 block">‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞</label>
                      <div className="space-y-2">
                        {['video', 'phone', 'message'].map((type) => {
                          const expert = experts.find(e => e.id === selectedExpert);
                          const fee = type === 'video' ? expert?.feeVideo : 
                                     type === 'phone' ? expert?.feePhone : expert?.feeMessage;
                          const icon = type === 'video' ? Video : type === 'phone' ? Phone : MessageCircle;
                          const label = type === 'video' ? '‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡•â‡§≤' : 
                                       type === 'phone' ? '‡§´‡•ã‡§® ‡§ï‡•â‡§≤' : '‡§Æ‡•à‡§∏‡•á‡§ú ‡§ö‡•à‡§ü';
                          
                          return (
                            <label key={type} className="flex items-center space-x-3 cursor-pointer">
                              <input
                                type="radio"
                                name="consultationType"
                                value={type}
                                checked={consultationType === type}
                                onChange={(e) => setConsultationType(e.target.value)}
                                className="text-green-600"
                              />
                              <div className="flex items-center space-x-2">
                                {React.createElement(icon, { className: "h-4 w-4" })}
                                <span>{label}</span>
                                <span className="text-green-600 font-medium">‚Çπ{fee}</span>
                              </div>
                            </label>
                          );
                        })}
                      </div>
                    </div>

                    <div>
                      <label htmlFor="query" className="text-sm font-medium mb-2 block">
                        ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ø‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®
                      </label>
                      <Textarea
                        id="query"
                        placeholder="‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ø‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§≤‡§ø‡§ñ‡•á‡§Ç..."
                        value={query}
                        onChange={(e) => setQuery(e.target.value)}
                        rows={4}
                        className="resize-none"
                      />
                    </div>

                    <Button 
                      onClick={handleBookConsultation}
                      className="w-full bg-green-600 hover:bg-green-700"
                    >
                      <Calendar className="w-4 h-4 mr-2" />
                      ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§¨‡•Å‡§ï ‡§ï‡§∞‡•á‡§Ç
                    </Button>
                  </>
                )}

                {!selectedExpert && (
                  <div className="text-center py-8 text-gray-500">
                    <Users className="h-12 w-12 mx-auto mb-3 text-gray-300" />
                    <p>‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ‡§ï‡§ø‡§∏‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ï‡•ã ‡§ö‡•Å‡§®‡•á‡§Ç</p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Recent Consultations */}
            <Card className="mt-6">
              <CardHeader>
                <CardTitle className="text-lg">‡§™‡§ø‡§õ‡§≤‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {recentConsultations.map((consultation, index) => (
                    <div key={index} className="p-3 bg-gray-50 rounded-lg">
                      <div className="font-medium text-sm text-gray-800">{consultation.topic}</div>
                      <div className="text-xs text-gray-600 mt-1">{consultation.expert}</div>
                      <div className="flex justify-between items-center mt-2">
                        <span className="text-xs text-gray-500">{consultation.date}</span>
                        <div className="flex items-center space-x-1">
                          {[...Array(5)].map((_, i) => (
                            <Star 
                              key={i} 
                              className={`h-3 w-3 ${
                                i < consultation.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'
                              }`} 
                            />
                          ))}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExpertPage;
